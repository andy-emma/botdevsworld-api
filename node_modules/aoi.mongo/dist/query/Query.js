"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Query = void 0;
const Cursor_1 = require("../Cursor");
const Generator_1 = require("../Generator");
const Transformer_1 = require("../Transformer");
/** A wrapper class for querying */
class Query {
    constructor(mongo, match, session) {
        this.mongo = mongo;
        this.filter = match.filter;
        this.session = session;
    }
    /** Find one matched document */
    async findOne(options) {
        options ?? (options = {});
        options.session = this.session;
        const doc = await this.mongo.collection.findOne(this.filter, options);
        return doc ? (0, Transformer_1.transform)(doc) : null;
    }
    /** Find all matched document */
    async findMulti(options) {
        options ?? (options = {});
        options.session = this.session;
        const cursor = await this.mongo.collection.find(this.filter, options);
        return new Cursor_1.Cursor(cursor);
    }
    /** Update one matched document */
    updateOne(value, options) {
        options ?? (options = {});
        options.session = this.session;
        options.upsert = false;
        const refs = [];
        const data = (0, Generator_1.generate)(value, refs);
        const filter = { $set: { data, refs } };
        return this.mongo.collection.updateOne(this.filter, filter, options);
    }
    /** Update all matched document */
    updateMulti(value, options) {
        options ?? (options = {});
        options.session = this.session;
        options.upsert = false;
        const refs = [];
        const data = (0, Generator_1.generate)(value, refs);
        const filter = { $set: { data, refs } };
        return this.mongo.collection.updateMany(this.filter, filter, options);
    }
    /** Rename a matched document to another key */
    rename(key, options) {
        options ?? (options = {});
        options.session = this.session;
        options.upsert = false;
        const filter = { $set: { key } };
        return this.mongo.collection.updateOne(this.filter, filter, options);
    }
    /** Delete one matched document */
    deleteOne(options) {
        options ?? (options = {});
        options.session = this.session;
        return this.mongo.collection.deleteOne(this.filter, options);
    }
    /** Delete all matched document */
    deleteMulti(options) {
        options ?? (options = {});
        options.session = this.session;
        return this.mongo.collection.deleteMany(this.filter, options);
    }
}
exports.Query = Query;
