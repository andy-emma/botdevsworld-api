import { ClientSession, CreateIndexesOptions, DeleteResult, IndexDirection, MongoClient, TransactionOptions, UpdateResult } from "mongodb";
import { Cursor, Doc, Mongo, Types } from ".";
import { Match, Filter, Query } from "./query";
/** A wrapper of mongo class for transaction */
export declare class Transaction<T extends Types> {
    /** Start transaction for a mongo client */
    static startTransaction(client: MongoClient, options?: TransactionOptions): Promise<void>;
    /** Commit transaction for a mongo client */
    static commitTransaction(client: MongoClient): Promise<void>;
    /** Abort transaction for a mongo client */
    static abortTransaction(client: MongoClient): Promise<void>;
    /** The mongo instance to wrap */
    readonly mongo: Mongo<T>;
    constructor(mongo: Mongo<T>);
    get session(): ClientSession;
    /**
     * Set a data into the collection
     * @param key The data key
     * @param value The data value
     */
    set(key: string, value: T): Promise<UpdateResult>;
    /**
     * Get a document from the collection
     * @param key The document key
     */
    get(key: string): Promise<Doc<T> | null>;
    /**
     * Delete a document from the collection
     * @param key The document key
     */
    delete(key: string): Promise<DeleteResult>;
    /**
     * Find and match all document key with the matcher in the collection
     * @param matcher The matcher in regex
     */
    match(matcher: RegExp): Promise<Cursor<T>>;
    /**
     * Get all document in the collection
     */
    all(): Promise<Cursor<T>>;
    /**
     * Delete all document in the collection
     */
    deleteAll(): Promise<DeleteResult>;
    /** Create an index in the ocllection */
    index(indexSpec: {
        key?: IndexDirection;
        data?: IndexDirection | {
            [K in keyof T]: IndexDirection;
        };
    }, options?: CreateIndexesOptions): Promise<void>;
    /** Create a query object */
    query(match: Match<T>): Query<T>;
    /** Shortcut for creating filter */
    filter(): Filter<T>;
}
/**
 * The class to represent transaction error
 */
export declare class TransactionError extends Error {
    constructor(message: string);
}
